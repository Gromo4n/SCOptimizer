from typing import List


class MakeDataset:
    def __init__(self):
        pass

    @staticmethod
    def get_all_drink_params() -> List[str]:
        return [
            'Название',
            'Восстановление выносливости', 
            'Выносливость', 
            'Живучесть', 
            'Радиация', 
            'Холод', 
            'Скорость передвижения', 
            'Отравление', 
            'Защита от холода',
            'Регенерация здоровья', 
            'Заработок с событий', 
            'Эффективность лечения'
            ]

    @staticmethod
    def get_all_medicine_params() -> List[str]:
        return [
            'Название',
            'Защита от холода', 
            'Живучесть', 
            'Периодическое лечение', 
            'Отравление', 
            'Защита от огня',
            'Эффективность лечения',
            'Защита от кровотечения', 
            'Восстановление выносливости', 
            'Скорость передвижения', 
            'Прочность', 
            'Сопротивление радиации', 
            'Отдача', 
            'Биологическое заражение', 
            'Химзащита', 
            'Сопротивление холоду', 
            'Горение', 
            'Защита от температуры', 
            'Покачивание', 
            'Температура', 
            'Кровотечение', 
            'Холод', 
            'Защита от пси-излучения', 
            'Выносливость', 
            'Реакция на хим. ожог', 
            'Реакция на электричество', 
            'Переносимый вес', 
            'Пси-излучение', 
            'Радиация', 
            'Регенерация здоровья', 
            'Защита от биозаражения', 
            'Сопротивление пси-излучению', 
            'Реакция на ожог', 
            'Сопротивление биозаражению', 
            'Сопротивление температуре', 
            'Пулестойкость', 
            'Стойкость', 
            'Реакция на разрыв', 
            'Мгновенное лечение'
            ]
        
    @staticmethod
    def get_all_food_params() -> List[str]:
        return [
            'Название',
            'Восстановление выносливости', 
            'Выносливость',  
            'Скорость передвижения', 
            'Регенерация здоровья', 
            'Кровотечение',  
            'Защита от холода', 
            'Реакция на разрыв', 
            'Эффективность лечения', 
            'Живучесть', 
            'Переносимый вес'
        ]

    @staticmethod
    def get_all_art_params() -> List[str]:
        params = [
                'Название',
                'Живучесть',
                'Эффективность лечения',
                'Восстановление выносливости',
                'Скорость передвижения',
                'Выносливость',
                'Переносимый вес',
                'Пси-излучение',
                'Реакция на электричество',
                'Регенерация здоровья',
                'Реакция на разрыв',
                'Пулестойкость',
                'Защита от взрыва',
                'Защита от разрыва',
                'Биологическое заражение',
                'Реакция на хим. ожог',
                'Радиация',
                'Температура',
                'Кровотечение',
                'Защита от радиации',
                'Защита от пси-излучения',
                'Защита от температуры',
                'Реакция на ожог',
                'Стойкость',
                'Электрозащита',
                'Горение',
                'Защита от кровотечения',
                'Защита от биозаражения',
                'Срабатывает при',
                'Снижает урон на',
                'Перезарядка',
                'Заряда за активацию',
                'Отдача',
                'Покачивание',
                'Защита от огня',
                'Химзащита',
                'Периодическое лечение',
                'Холод'
        ]

        new_params = params.copy()
        for param_idx in range(1, len(params)):
            new_params.append("add_" + params[param_idx])
        
        return new_params
    
    def make_dataset(self, stats: dict, item_type: str) -> dict:
        handlers = {
            "food": self.get_all_food_params(),
            "drink": self.get_all_drink_params(),
            "medicine": self.get_all_medicine_params(),
            "art": self.get_all_art_params()
        }
        all_params = handlers.get(item_type)
        if not all_params:
            print("Неизвестный параметр")
            return {}
        result = {key: stats.get(key, "N/A") for key in all_params}
        return result